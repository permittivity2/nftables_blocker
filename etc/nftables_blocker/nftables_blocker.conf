# Configuration for nftables_blocker

# General settings
# chain is the name of the chain to be used in nftables
#   You can see this when running ' nft -a list ruleset '
chain = firewall
# element is the name of the hash used in the table to hold the IPs to be blocked
#   You can see this when running ' nft -a list ruleset '
element = badipv4

# logfile:
#  The logfile section is used to define the log files that will be read and the regex patterns that will be used to 
#   match the log entries.
#  Each logfile is read in a separate thread so it is possible to read multiple log files at the same time.
#  By default, log files are always read, never written.  If you use something other than the DefaultExtractor module 
#   then YMMV and Let the Buyer Beware!
#  There is no check to see if the same log file is in multiple "logfile" sections.  
#  This may be good to use, for example,  with syslog.  You may want to differentiate between bad ssh logins and bad 
#   mail and bad bind but all in the exact same log file.
#  IMHO: This is actually very bad practice to do this on multiple levels but to each their own!
# regexes:
#   Regex patterns are applied in perl sort order.  I encourage using integers starting at 100 or 1000
#   The actual order in this config is irrelevant but the order id (name) is used to sort the regex patterns.
#   Regex patterns are used directly used in the perl code so they must be valid perl regex patterns.  
#   This is not checked.  No error checking is done on the regex patterns.  No escaping is done on the regex patterns.
#   The regex is applied per line of the log being read
logfile[auth_log][regexes][100] = Failed password for invalid user
logfile[auth_log][regexes][101] = Failed password for invalid user root
logfile[auth_log][regexes][102] = session closed for user root
logfile[auth_log][regexes][103] = HTTP_PROBE_ASYNC_ERROR_CANNOT_CONNECT
logfile[auth_log][regexes][104] = Failed password for root from
# ignore_regexes:
#   These are regex patterns that are used to ignore log entries.  This is useful for ignoring log entries that are 
#   not useful for blocking.  For example, you may want to ignore log entries that are successful logins for a 
#   particular user.
#   The regex is applied per line of the log being read and is applied after the regexes are applied.
#   This means you can get a log entry that is matched by a regex and then ignored by an ignore_regex.
#   This is a bit helpful for troubleshoting. You can see what is being matched and then ignore it.
logfile[auth_log][ignore_regexes][100] = Accepted publickey for.*from.*port.*ssh
logfile[auth_log][ignore_regexes][101] = Accepted password for.*from.*port.*ssh
logfile[auth_log][ignore_regexes][102] = Accepted.*for.*from.*port.*ssh
# never_block:
#   These are a list of IPs that will never be blocked.
#   After regexes are matched and then ignore_regexes are matched, the IPs are checked against this list.
#   For now, it has to to be specific IPs and no subnets or ranges.  That kinda sucks.  Sorry :(
#   However, it can be regexes.  So you can make sure all IPs in a subnet or range are good by using a regex.
logfile[auth_log][never_block][100] = ^127\.
logfile[auth_log][never_block][101] = ^192\.168\.
logfile[auth_log][never_block][102] = ^10\.
logfile[auth_log][never_block][103] = ^172\.1[6-9]\.
logfile[auth_log][never_block][104] = ^169\.254\.
logfile[auth_log][never_block][105] = ^224\.
logfile[auth_log][never_block][106] = ^255\.
logfile[auth_log][never_block][107] = ^0\.
# files:
#   These are the log files which are reviewed for bad IPs based upon the above regex.
#   It is possible to have multiple files for the same log type.  Not for sure that is useful but it is possible.
#   Log files will be read in the order they are defined in the config file.
logfile[auth_log][files][100] = /var/log/auth.log
logfile[auth_log][files][110] = /home/gardner/git/nftables_blocker/var/log/auth.log
# scan_interval:
#   The number of seconds between scans of the log file.  This is used to prevent the log file from 
#   being read too often or not often enough.
#   Actually, this is how often run is called in the module that is used to allegedly do something with the log file.
logfile[auth_log][scan_interval] = 5
# read_all:
#   1 = start at the beginning of the log file each time.  
#   0 = start at last read position. 
#   Default is 0 --- to read from the last read position
#   For large files, making this 0 will make the file reading faster but it will not read the 
#   entire file on each scan.
#   There is a possibility that some log entries will be missed if the file is 
#   rotated and the log entries are not in the new file.
logfile[auth_log][read_all] = 1   
# Module:
#   If this is not set, the default module is used.  The default module is the DefaultExtractor module.
#   This paramater is literally concatenated to make the string "NftablesBlocker::DefaultExtractor" and then loaded.
#   This is here so you can create your own module and use it.
#   Only two methods are required in the module: sub new and sub run.  The new method is called when the module is loaded.
#   The new method is called with all the configs for the logfile (and many more configs!) as a hash reference.
#   The run method is called on each scan_interval; no arguments are passed to the run method.
#   The run interval must return an array ref of IPs to be blocked.
#       The IPs returned are added to a queue which has a separate thread to add the IPs to the nftables tables element.
# logfile[auth_log][module] = DefaultExtractor

# # Mail Log configuration
# logfile[mail_log][regexes][AA] = some-mail-log-regex
# logfile[mail_log][regexes][AB] = bad user blah
# logfile[mail_log][files][100] = /var/log/mail.log

# # Named (BIND) configuration
# logfile[bind_log][regexes][100] = some-bind-log-regex
# logfile[bind_log][files][100] = /var/log/named/bind.log
# logfile[queries_log][regexes][100] = some-queries-log-regex
# logfile[queries_log][files][100] = /var/log/named/queries.log

# # General error log configuration
# logfile[error_log][regexes][100] = some-error-log-regex
# logfile[error_log][files][100] = /var/log/named/error.log
